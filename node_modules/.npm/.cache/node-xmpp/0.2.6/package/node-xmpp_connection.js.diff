--- /home/dhruv.m/node-libs/astro-node-xmpp-v0.2.5-0-gdc9b03e/astro-node-xmpp-dc9b03e/lib/xmpp/connection.js	2011-01-31 10:21:42.000000000 +0530
+++ connection.js	2011-03-01 19:44:42.421875000 +0530
@@ -12,6 +12,7 @@ var NS_XMPP_STREAMS = 'urn:ietf:params:x
     'stanza' to Client & Component. Therefore we won't confuse the
     user with stanzas before authentication has finished.
 */
+
 function Connection(socket) {
     var self = this;
     EventEmitter.call(this);
@@ -133,10 +134,37 @@ Connection.prototype.onData = function(d
 Connection.prototype.setSecure = function(credentials) {
     var self = this;
     this.stopParser();
-    this.socket.setSecure(credentials || this.credentials);
-    this.socket.addListener('secure', function() {
+
+	// Remove old event listeners
+    this.socket.removeAllListeners('data');
+    this.socket.removeAllListeners('end');
+    this.socket.removeAllListeners('drain');
+    this.socket.removeAllListeners('close');
+
+    var ct = require('./starttls.js')(this.socket, credentials || this.credentials, function() {
         self.startParser();
+        self.startStream();
+    });
+
+    // The socket is now the cleartext stream
+    this.socket = ct;
+
+    // Attach new listeners on the cleartext stream
+    this.socket.addListener('data', function(data) {
+        self.onData(data);
+    });
+    this.socket.addListener('end', function() {
+        self.onEnd();
     });
+
+    var proxyEvent = function(event) {
+        self.socket.addListener(event, function() {
+            self.emit.apply(self, Array.prototype.splice.call(arguments, 0, 0, event));
+        });
+    };
+    proxyEvent('data');  // let them sniff
+    proxyEvent('drain');
+    proxyEvent('close');
 };
 
 /**
